/*
 *     Generated by class-dump 3.1.2.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2007 by Steve Nygard.
 */

#import "_AITFireProbe.h"

#import "RecentlyClosedTabViewControllerDelegate-Protocol.h"
#import "RotatablePopoverControllerDelegate-Protocol.h"
#import "TabBarDelegate-Protocol.h"
#import "TabOverflowListControllerDelegate-Protocol.h"

@class NSMutableArray, NSMutableSet, NSTimer, RecentlyClosedTabViewController, TabBar, TabDocument, TiltedTabView, UIBarButtonItem;

@interface TabController : _AITFireProbe <RecentlyClosedTabViewControllerDelegate, RotatablePopoverControllerDelegate, TabBarDelegate, TabOverflowListControllerDelegate>
{
    RecentlyClosedTabViewController *_recentlyClosedTabController;
    BOOL _tabBarItemsFixed;
    NSMutableArray *_tabDocuments;
    TabDocument *_topOfRightRotor;
    struct _NSRange _visibleTabRange;
    NSTimer *_saveStateTimer;
    NSTimer *_stateValidateTimer;
    TabDocument *_tabDocumentBeingAddedToTiltedTabView;
    NSMutableSet *_tabDocumentsAboutToBeClosedInTiltedTabView;
    UIBarButtonItem *_tiltedTabViewAddTabButton;
    BOOL _tabExposeButtonIndicatorExcludesBlankDocuments;
    TabDocument *_activeTabDocument;
    TabBar *_tabBar;
    TiltedTabView *_tiltedTabView;
}

- (id)tiltedTabView;
- (id)recentlyClosedTabController;
- (BOOL)tabExposeButtonIndicatorExcludesBlankDocuments;
- (id)tabDocuments;
- (id)tabBar;
- (id)activeTabDocument;
- (void)tabOverflowListController:(id)fp8 didSelectTabDocument:(id)fp12;
- (void)_presentOverflowListController;
- (void)_rotateDocumentIntoView:(id)fp8;
- (void)_moveLeftStackDocumentIntoRightRotor:(id)fp8;
- (void)_adjustOverflowForDocumentToBeRemoved:(id)fp8 willFocusPreviousDocument:(BOOL)fp12;
- (void)_adjustOverflowForInsertedDocument:(id)fp8;
- (BOOL)_isDocumentInLeftStack:(id)fp8;
- (id)_nextDocumentInRotorAfter:(id)fp8;
- (void)_adjustTopOfRightRotor;
- (void)_rotateRightRotorDocumentIntoView:(id)fp8;
- (BOOL)_isDocumentInRightRotor:(id)fp8;
- (BOOL)_isOverflowing;
- (void)_addNewActiveTiltedTabViewTabWithNavigationDestination:(id)fp8;
- (void)_addNewActiveTiltedTabViewTab;
- (void)tiltedTabView:(id)fp8 didSelectNavigationDestination:(id)fp12;
- (id)blankSnapshotForTiltedTabView:(id)fp8 withTransparentBorder:(BOOL)fp12 topBackdropHeight:(float)fp16;
- (void)tiltedTabView:(id)fp8 requestSnapshotOfSize:(struct CGSize)fp12 withTransparentBorder:(BOOL)fp20 topBackdropHeight:(float)fp24 forItem:(id)fp28 completion:(id)fp(null);
- (void)tiltedTabView:(id)fp8 animateTopBackdropView:(id)fp12 hidden:(BOOL)fp16;
- (float)tiltedTabView:(id)fp8 headerHeightForItem:(id)fp12;
- (void)tiltedTabView:(id)fp8 relinquishContentView:(id)fp12 forItem:(id)fp16;
- (id)tiltedTabView:(id)fp8 borrowContentViewForItem:(id)fp12 withTopBackdropView:(id *)fp16 ofHeight:(float)fp20;
- (id)currentItemForTiltedTabView:(id)fp8;
- (void)tiltedTabView:(id)fp8 didMoveItem:(id)fp12 overItem:(id)fp16;
- (void)tiltedTabView:(id)fp8 closeItem:(id)fp12;
- (BOOL)tiltedTabView:(id)fp8 canCloseItem:(id)fp12;
- (void)tiltedTabView:(id)fp8 didSelectItem:(id)fp12;
- (void)tiltedTabViewDidDismiss:(id)fp8;
- (void)tiltedTabViewWillDismiss:(id)fp8;
- (void)tiltedTabViewDidPresent:(id)fp8;
- (void)tiltedTabViewWillPresent:(id)fp8;
- (id)_tabDocumentRepresentedByTiltedTabItem:(id)fp8;
- (void)_dismissTiltedTabView;
- (void)updateTiltedTabViewToolbarItems;
- (id)tiltedTabViewToolbarItems;
- (void)_updateTiltedTabViewCloudTabs;
- (void)_cloudTabsDidUpdate:(id)fp8;
- (void)_updateTiltedTabViewItemsAnimated:(BOOL)fp8;
- (void)_updateTiltedTabViewItems;
- (BOOL)usesTiltedTabView;
- (void)setUsesTiltedTabView:(BOOL)fp8;
- (void)setTabExposeButtonIndicatorExcludesBlankDocuments:(BOOL)fp8;
- (void)updateTabExposeButtonIndicator;
- (void)openBlankTabDocumentOnPad;
- (void)updateTabBarAnimated:(BOOL)fp8;
- (void)updateTabBarAnimated:(BOOL)fp8 completion:(id)fp(null);
- (void)updateVisibleTabs;
- (void)popoverControllerDidDismissPopover:(id)fp8;
- (void)recentlyClosedTabViewController:(id)fp8 didSelectTabDocument:(id)fp12;
- (void)tabBar:(id)fp8 activateItem:(id)fp12;
- (void)tabBar:(id)fp8 closeItem:(id)fp12;
- (void)tabBar:(id)fp8 moveItem:(id)fp12 overItem:(id)fp16;
- (void)popoverController:(id)fp8 willPresentAfterRotationToInterfaceOrientation:(int)fp12;
- (void)tabBarShowMoreTabs:(id)fp8;
- (void)tabBarAddTab:(id)fp8;
- (BOOL)tabBar:(id)fp8 canCloseItem:(id)fp12;
- (BOOL)tabBar:(id)fp8 canMoveItem:(id)fp12;
- (id)_tabDocumentRepresentedByTabBarItem:(id)fp8;
- (void)_setTabBarItemsFixed:(BOOL)fp8;
- (BOOL)usesTabBar;
- (void)setUsesTabBar:(BOOL)fp8;
- (void)dealloc;
- (id)init;
- (void)openInitialBlankTabDocumentIfNeeded;
- (void)replaceTabDocument:(id)fp8 withTabDocument:(id)fp12;
- (void)pausePagesWithEventsForActiveDocument:(BOOL)fp8;
- (void)resume;
- (void)suspendForEventsOnly:(BOOL)fp8;
- (id)tabDocumentForURL:(id)fp8;
- (id)tabDocumentForWebView:(id)fp8;
- (void)moveTabDocument:(id)fp8 overTabDocument:(id)fp12;
- (void)closeAllOpenTabsAnimated:(BOOL)fp8;
- (void)closeTabDocument:(id)fp8 animated:(BOOL)fp12;
- (BOOL)_shouldFocusPreviousDocumentWhenClosingDocument:(id)fp8;
- (BOOL)_createAndSwitchToNewBlankTabDocumentOpeningCaptiveLandingPageIfNecessary;
- (id)_openBlankTabDocument;
- (id)openTabDocumentFromTabDocument:(id)fp8 inBackground:(BOOL)fp12 animated:(BOOL)fp16;
- (void)_insertTabDocument:(id)fp8 afterTabDocument:(id)fp12 inBackground:(BOOL)fp16 animated:(BOOL)fp20;
- (void)_makeRoomForNewTabDocument:(id)fp8;
- (id)_oldestInactiveTabDocument;
- (unsigned int)maximumTabDocumentCount;
- (BOOL)canAddNewTab;
- (void)setActiveTabDocument:(id)fp8 animated:(BOOL)fp12;
- (void)setActiveTabDocument:(id)fp8;
- (void)_logActivationForTab:(id)fp8;
- (void)logTabActivationInterval:(double)fp8 forActivationType:(int)fp16;
- (void)_tabCountDidChange;
- (void)_auditTabCount;
- (BOOL)_readStateWithURL:(id)fp8;
- (BOOL)readStateWithURL:(id)fp8;
- (void)saveStateInBackground:(BOOL)fp8;
- (void)saveStateInBackground:(BOOL)fp8 needsValidate:(BOOL)fp12;
- (void)_validateSavedState:(id)fp8;
- (void)_clearStateValidateTimer;
- (void)_saveStateFromTimer:(id)fp8;
- (void)_setSaveStateTimer:(id)fp8;
- (void)setStateNeedsSaved;

@end

